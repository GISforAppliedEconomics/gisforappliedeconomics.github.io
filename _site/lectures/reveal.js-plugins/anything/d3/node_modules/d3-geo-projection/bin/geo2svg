#!/usr/bin/env node

var os = require("os"),
    commander = require("commander"),
    d3 = require("d3-geo"),
    read = require("./read"),
    write = require("./write");

commander
    .version(require("../package.json").version)
    .usage("[options] [file]")
    .description("Convert GeoJSON to SVG.")
    .option("-o, --out <file>", "output file name; defaults to “-” for stdout", "-")
    .option("-w, --width <value>", "output width", 960)
    .option("-h, --height <value>", "output height", 500)
    .option("-p, --precision <value>", "output precision", 6)
    .option("-n, --newline-delimited", "accept newline-delimited JSON")
    .parse(process.argv);

if (commander.args.length === 0) commander.args[0] = "-";
else if (commander.args.length !== 1) {
  console.error();
  console.error("  error: multiple input files");
  console.error();
  process.exit(1);
}

var string,
    precision = +commander.precision,
    reader = read(commander.args[0], commander.newlineDelimited, transform).then(end).catch(abort),
    writer = write(commander.out),
    path = d3.geoPath().context({
      moveTo: function(x, y) { string += "M" + format(x) + "," + format(y); },
      closePath: function() { string += "Z"; },
      lineTo: function(x, y) { string += "L" + format(x) + "," + format(y); }
    });

writer.write("<?xml version=\"1.0\" encoding=\"utf-8\"?>" + os.EOL
    + "<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">" + os.EOL
    + "<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\""
    + " width=\"" + +commander.width + "\""
    + " height=\"" + +commander.height + "\""
    + " viewBox=\"0 0 " + +commander.width + " " + +commander.height + "\""
    + " fill=\"none\" stroke=\"black\""
    + ">" + os.EOL);

function transform(d) {
  return writer.write("  <path"
      + (d.id == null ? "" : " id=\"" + quote(d.id + "") + "\"")
      + (string = "", path(d), string ? " d=\"" + string + "\"" : "")
      + "></path>" + os.EOL);
}

function end() {
  return writer.write("</svg>" + os.EOL);
}

function abort(error) {
  console.error(error.stack);
}

function quote(string) {
  return string.replace(/"/g, "&quot;");
}

function format(x) {
  x = x.toFixed(precision);

  out: for (var n = x.length, i = 1, i0 = -1, i1; i < n; ++i) {
    switch (x[i]) {
      case ".": i0 = i1 = i; break;
      case "0": if (i0 === 0) i0 = i; i1 = i; break;
      case "e": break out;
      default: if (i0 > 0) i0 = 0; break;
    }
  }

  return i0 > 0 ? x.slice(0, i0) + x.slice(i1 + 1) : x;
}
